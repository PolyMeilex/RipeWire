// =============
// This file is autogenerated by obj_gen
// DO NOT EDIT
// =============

use super::*;

/// Spa:Pod:Object:Param:PropInfo
#[derive(Debug)]
pub struct PropInfo<'a>(pub PodObjectDeserializer<'a>);
impl<'a> PropInfo<'a> {
    fn get_raw(&self, id: u32) -> Option<PodDeserializer> {
        self.0.clone().find(|v| v.key == id).map(|v| v.value)
    }
    fn get(&self, key: SpaPropInfo) -> Option<PodDeserializer> {
        self.get_raw(key.to_u32().unwrap())
    }
    /// name: Spa:Pod:Object:Param:PropInfo:id
    /// returns: Id
    fn id(&self) -> Option<PodDeserializer> {
        self.get(SpaPropInfo::Id)
    }
    /// name: Spa:Pod:Object:Param:PropInfo:name
    /// returns: String
    fn name(&self) -> Option<PodDeserializer> {
        self.get(SpaPropInfo::Name)
    }
    /// name: Spa:Pod:Object:Param:PropInfo:type
    /// returns: Pod
    fn ty(&self) -> Option<PodDeserializer> {
        self.get(SpaPropInfo::Type)
    }
    /// name: Spa:Pod:Object:Param:PropInfo:labels
    /// returns: Struct
    fn labels(&self) -> Option<PodDeserializer> {
        self.get(SpaPropInfo::Labels)
    }
    /// name: Spa:Pod:Object:Param:PropInfo:container
    /// returns: Id
    fn container(&self) -> Option<PodDeserializer> {
        self.get(SpaPropInfo::Container)
    }
    /// name: Spa:Pod:Object:Param:PropInfo:params
    /// returns: Bool
    fn params(&self) -> Option<PodDeserializer> {
        self.get(SpaPropInfo::Params)
    }
    /// name: Spa:Pod:Object:Param:PropInfo:description
    /// returns: String
    fn description(&self) -> Option<PodDeserializer> {
        self.get(SpaPropInfo::Description)
    }
}

/// Spa:Pod:Object:Param:Props
#[derive(Debug)]
pub struct Props<'a>(pub PodObjectDeserializer<'a>);
impl<'a> Props<'a> {
    fn get_raw(&self, id: u32) -> Option<PodDeserializer> {
        self.0.clone().find(|v| v.key == id).map(|v| v.value)
    }
    fn get(&self, key: SpaProp) -> Option<PodDeserializer> {
        self.get_raw(key.to_u32().unwrap())
    }
    /// name: Spa:Pod:Object:Param:Props:device
    /// returns: String
    fn device(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::Device)
    }
    /// name: Spa:Pod:Object:Param:Props:deviceName
    /// returns: String
    fn device_name(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::DeviceName)
    }
    /// name: Spa:Pod:Object:Param:Props:deviceFd
    /// returns: Fd
    fn device_fd(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::DeviceFd)
    }
    /// name: Spa:Pod:Object:Param:Props:card
    /// returns: String
    fn card(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::Card)
    }
    /// name: Spa:Pod:Object:Param:Props:cardName
    /// returns: String
    fn card_name(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::CardName)
    }
    /// name: Spa:Pod:Object:Param:Props:minLatency
    /// returns: Int
    fn min_latency(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::MinLatency)
    }
    /// name: Spa:Pod:Object:Param:Props:maxLatency
    /// returns: Int
    fn max_latency(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::MaxLatency)
    }
    /// name: Spa:Pod:Object:Param:Props:periods
    /// returns: Int
    fn periods(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::Periods)
    }
    /// name: Spa:Pod:Object:Param:Props:periodSize
    /// returns: Int
    fn period_size(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::PeriodSize)
    }
    /// name: Spa:Pod:Object:Param:Props:periodEvent
    /// returns: Bool
    fn period_event(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::PeriodEvent)
    }
    /// name: Spa:Pod:Object:Param:Props:live
    /// returns: Bool
    fn live(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::Live)
    }
    /// name: Spa:Pod:Object:Param:Props:rate
    /// returns: Double
    fn rate(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::Rate)
    }
    /// name: Spa:Pod:Object:Param:Props:quality
    /// returns: Int
    fn quality(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::Quality)
    }
    /// name: Spa:Pod:Object:Param:Props:bluetoothAudioCodec
    /// returns: Id
    fn bluetooth_audio_codec(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::BluetoothAudioCodec)
    }
    /// name: Spa:Pod:Object:Param:Props:bluetoothOffloadActive
    /// returns: Bool
    fn bluetooth_offload_active(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::BluetoothOffloadActive)
    }
    /// name: Spa:Pod:Object:Param:Props:waveType
    /// returns: Id
    fn wave_type(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::WaveType)
    }
    /// name: Spa:Pod:Object:Param:Props:frequency
    /// returns: Int
    fn frequency(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::Frequency)
    }
    /// name: Spa:Pod:Object:Param:Props:volume
    /// returns: Float
    fn volume(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::Volume)
    }
    /// name: Spa:Pod:Object:Param:Props:mute
    /// returns: Bool
    fn mute(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::Mute)
    }
    /// name: Spa:Pod:Object:Param:Props:patternType
    /// returns: Id
    fn pattern_type(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::PatternType)
    }
    /// name: Spa:Pod:Object:Param:Props:ditherType
    /// returns: Id
    fn dither_type(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::DitherType)
    }
    /// name: Spa:Pod:Object:Param:Props:truncate
    /// returns: Bool
    fn truncate(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::Truncate)
    }
    /// name: Spa:Pod:Object:Param:Props:channelVolumes
    /// returns: Array
    fn channel_volumes(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::ChannelVolumes)
    }
    /// name: Spa:Pod:Object:Param:Props:volumeBase
    /// returns: Float
    fn volume_base(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::VolumeBase)
    }
    /// name: Spa:Pod:Object:Param:Props:volumeStep
    /// returns: Float
    fn volume_step(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::VolumeStep)
    }
    /// name: Spa:Pod:Object:Param:Props:channelMap
    /// returns: Array
    fn channel_map(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::ChannelMap)
    }
    /// name: Spa:Pod:Object:Param:Props:monitorMute
    /// returns: Bool
    fn monitor_mute(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::MonitorMute)
    }
    /// name: Spa:Pod:Object:Param:Props:monitorVolumes
    /// returns: Array
    fn monitor_volumes(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::MonitorVolumes)
    }
    /// name: Spa:Pod:Object:Param:Props:latencyOffsetNsec
    /// returns: Long
    fn latency_offset_nsec(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::LatencyOffsetNsec)
    }
    /// name: Spa:Pod:Object:Param:Props:softMute
    /// returns: Bool
    fn soft_mute(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::SoftMute)
    }
    /// name: Spa:Pod:Object:Param:Props:softVolumes
    /// returns: Array
    fn soft_volumes(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::SoftVolumes)
    }
    /// name: Spa:Pod:Object:Param:Props:iec958Codecs
    /// returns: Array
    fn iec958_codecs(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::Iec958Codecs)
    }
    /// name: Spa:Pod:Object:Param:Props:volumeRampSamples
    /// returns: Int
    fn volume_ramp_samples(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::VolumeRampSamples)
    }
    /// name: Spa:Pod:Object:Param:Props:volumeRampStepSamples
    /// returns: Int
    fn volume_ramp_step_samples(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::VolumeRampStepSamples)
    }
    /// name: Spa:Pod:Object:Param:Props:volumeRampTime
    /// returns: Int
    fn volume_ramp_time(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::VolumeRampTime)
    }
    /// name: Spa:Pod:Object:Param:Props:volumeRampStepTime
    /// returns: Int
    fn volume_ramp_step_time(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::VolumeRampStepTime)
    }
    /// name: Spa:Pod:Object:Param:Props:volumeRampScale
    /// returns: Id
    fn volume_ramp_scale(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::VolumeRampScale)
    }
    /// name: Spa:Pod:Object:Param:Props:brightness
    /// returns: Float
    fn brightness(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::Brightness)
    }
    /// name: Spa:Pod:Object:Param:Props:contrast
    /// returns: Float
    fn contrast(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::Contrast)
    }
    /// name: Spa:Pod:Object:Param:Props:saturation
    /// returns: Float
    fn saturation(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::Saturation)
    }
    /// name: Spa:Pod:Object:Param:Props:hue
    /// returns: Int
    fn hue(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::Hue)
    }
    /// name: Spa:Pod:Object:Param:Props:gamma
    /// returns: Int
    fn gamma(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::Gamma)
    }
    /// name: Spa:Pod:Object:Param:Props:exposure
    /// returns: Int
    fn exposure(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::Exposure)
    }
    /// name: Spa:Pod:Object:Param:Props:gain
    /// returns: Float
    fn gain(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::Gain)
    }
    /// name: Spa:Pod:Object:Param:Props:sharpness
    /// returns: Float
    fn sharpness(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::Sharpness)
    }
    /// name: Spa:Pod:Object:Param:Props:params
    /// returns: Struct
    fn params(&self) -> Option<PodDeserializer> {
        self.get(SpaProp::Params)
    }
}

/// Spa:Pod:Object:Param:Format
#[derive(Debug)]
pub struct Format<'a>(pub PodObjectDeserializer<'a>);
impl<'a> Format<'a> {
    fn get_raw(&self, id: u32) -> Option<PodDeserializer> {
        self.0.clone().find(|v| v.key == id).map(|v| v.value)
    }
    fn get(&self, key: SpaFormat) -> Option<PodDeserializer> {
        self.get_raw(key.to_u32().unwrap())
    }
    /// name: Spa:Pod:Object:Param:Format:mediaType
    /// returns: Id
    fn media_type(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::MediaType)
    }
    /// name: Spa:Pod:Object:Param:Format:mediaSubtype
    /// returns: Id
    fn media_subtype(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::MediaSubtype)
    }
    /// name: Spa:Pod:Object:Param:Format:Audio:format
    /// returns: Id
    fn audio_format(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::AudioFormat)
    }
    /// name: Spa:Pod:Object:Param:Format:Audio:flags
    /// returns: Id
    fn audio_flags(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::AudioFlags)
    }
    /// name: Spa:Pod:Object:Param:Format:Audio:rate
    /// returns: Int
    fn audio_rate(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::AudioRate)
    }
    /// name: Spa:Pod:Object:Param:Format:Audio:channels
    /// returns: Int
    fn audio_channels(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::AudioChannels)
    }
    /// name: Spa:Pod:Object:Param:Format:Audio:position
    /// returns: Array
    fn audio_position(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::AudioPosition)
    }
    /// name: Spa:Pod:Object:Param:Format:Audio:iec958Codec
    /// returns: Id
    fn audio_iec958_codec(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::AudioIec958Codec)
    }
    /// name: Spa:Pod:Object:Param:Format:Audio:bitorder
    /// returns: Id
    fn audio_bitorder(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::AudioBitorder)
    }
    /// name: Spa:Pod:Object:Param:Format:Audio:interleave
    /// returns: Int
    fn audio_interleave(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::AudioInterleave)
    }
    /// name: Spa:Pod:Object:Param:Format:Audio:bitrate
    /// returns: Int
    fn audio_bitrate(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::AudioBitrate)
    }
    /// name: Spa:Pod:Object:Param:Format:Audio:blockAlign
    /// returns: Int
    fn audio_block_align(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::AudioBlockAlign)
    }
    /// name: Spa:Pod:Object:Param:Format:Audio:AAC:streamFormat
    /// returns: Id
    fn audio_aac_stream_format(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::AudioAacStreamFormat)
    }
    /// name: Spa:Pod:Object:Param:Format:Audio:WMA:profile
    /// returns: Id
    fn audio_wma_profile(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::AudioWmaProfile)
    }
    /// name: Spa:Pod:Object:Param:Format:Audio:AMR:bandMode
    /// returns: Id
    fn audio_amr_band_mode(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::AudioAmrBandMode)
    }
    /// name: Spa:Pod:Object:Param:Format:Video:format
    /// returns: Id
    fn video_format(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::VideoFormat)
    }
    /// name: Spa:Pod:Object:Param:Format:Video:modifier
    /// returns: Long
    fn video_modifier(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::VideoModifier)
    }
    /// name: Spa:Pod:Object:Param:Format:Video:size
    /// returns: Rectangle
    fn video_size(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::VideoSize)
    }
    /// name: Spa:Pod:Object:Param:Format:Video:framerate
    /// returns: Fraction
    fn video_framerate(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::VideoFramerate)
    }
    /// name: Spa:Pod:Object:Param:Format:Video:maxFramerate
    /// returns: Fraction
    fn video_max_framerate(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::VideoMaxFramerate)
    }
    /// name: Spa:Pod:Object:Param:Format:Video:views
    /// returns: Int
    fn video_views(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::VideoViews)
    }
    /// name: Spa:Pod:Object:Param:Format:Video:interlaceMode
    /// returns: Id
    fn video_interlace_mode(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::VideoInterlaceMode)
    }
    /// name: Spa:Pod:Object:Param:Format:Video:pixelAspectRatio
    /// returns: Fraction
    fn video_pixel_aspect_ratio(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::VideoPixelAspectRatio)
    }
    /// name: Spa:Pod:Object:Param:Format:Video:multiviewMode
    /// returns: Id
    fn video_multiview_mode(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::VideoMultiviewMode)
    }
    /// name: Spa:Pod:Object:Param:Format:Video:multiviewFlags
    /// returns: Id
    fn video_multiview_flags(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::VideoMultiviewFlags)
    }
    /// name: Spa:Pod:Object:Param:Format:Video:chromaSite
    /// returns: Id
    fn video_chroma_site(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::VideoChromaSite)
    }
    /// name: Spa:Pod:Object:Param:Format:Video:colorRange
    /// returns: Id
    fn video_color_range(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::VideoColorRange)
    }
    /// name: Spa:Pod:Object:Param:Format:Video:colorMatrix
    /// returns: Id
    fn video_color_matrix(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::VideoColorMatrix)
    }
    /// name: Spa:Pod:Object:Param:Format:Video:transferFunction
    /// returns: Id
    fn video_transfer_function(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::VideoTransferFunction)
    }
    /// name: Spa:Pod:Object:Param:Format:Video:colorPrimaries
    /// returns: Id
    fn video_color_primaries(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::VideoColorPrimaries)
    }
    /// name: Spa:Pod:Object:Param:Format:Video:profile
    /// returns: Int
    fn video_profile(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::VideoProfile)
    }
    /// name: Spa:Pod:Object:Param:Format:Video:level
    /// returns: Int
    fn video_level(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::VideoLevel)
    }
    /// name: Spa:Pod:Object:Param:Format:Video:H264:streamFormat
    /// returns: Id
    fn video_h264_stream_format(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::VideoH264StreamFormat)
    }
    /// name: Spa:Pod:Object:Param:Format:Video:H264:alignment
    /// returns: Id
    fn video_h264_alignment(&self) -> Option<PodDeserializer> {
        self.get(SpaFormat::VideoH264Alignment)
    }
}

/// Spa:Pod:Object:Param:Buffers
#[derive(Debug)]
pub struct Buffers<'a>(pub PodObjectDeserializer<'a>);
impl<'a> Buffers<'a> {
    fn get_raw(&self, id: u32) -> Option<PodDeserializer> {
        self.0.clone().find(|v| v.key == id).map(|v| v.value)
    }
    fn get(&self, key: SpaParamBuffers) -> Option<PodDeserializer> {
        self.get_raw(key.to_u32().unwrap())
    }
    /// name: Spa:Pod:Object:Param:Buffers:buffers
    /// returns: Int
    fn buffers(&self) -> Option<PodDeserializer> {
        self.get(SpaParamBuffers::Buffers)
    }
    /// name: Spa:Pod:Object:Param:Buffers:blocks
    /// returns: Int
    fn blocks(&self) -> Option<PodDeserializer> {
        self.get(SpaParamBuffers::Blocks)
    }
    /// name: Spa:Pod:Object:Param:Buffers:BlockInfo:size
    /// returns: Int
    fn block_info_size(&self) -> Option<PodDeserializer> {
        self.get(SpaParamBuffers::Size)
    }
    /// name: Spa:Pod:Object:Param:Buffers:BlockInfo:stride
    /// returns: Int
    fn block_info_stride(&self) -> Option<PodDeserializer> {
        self.get(SpaParamBuffers::Stride)
    }
    /// name: Spa:Pod:Object:Param:Buffers:BlockInfo:align
    /// returns: Int
    fn block_info_align(&self) -> Option<PodDeserializer> {
        self.get(SpaParamBuffers::Align)
    }
    /// name: Spa:Pod:Object:Param:Buffers:BlockInfo:dataType
    /// returns: Int
    fn block_info_data_type(&self) -> Option<PodDeserializer> {
        self.get(SpaParamBuffers::DataType)
    }
    /// name: Spa:Pod:Object:Param:Buffers:BlockInfo:metaType
    /// returns: Int
    fn block_info_meta_type(&self) -> Option<PodDeserializer> {
        self.get(SpaParamBuffers::MetaType)
    }
}

/// Spa:Pod:Object:Param:Meta
#[derive(Debug)]
pub struct Meta<'a>(pub PodObjectDeserializer<'a>);
impl<'a> Meta<'a> {
    fn get_raw(&self, id: u32) -> Option<PodDeserializer> {
        self.0.clone().find(|v| v.key == id).map(|v| v.value)
    }
    fn get(&self, key: SpaParamMeta) -> Option<PodDeserializer> {
        self.get_raw(key.to_u32().unwrap())
    }
    /// name: Spa:Pod:Object:Param:Meta:type
    /// returns: Id
    fn ty(&self) -> Option<PodDeserializer> {
        self.get(SpaParamMeta::Type)
    }
    /// name: Spa:Pod:Object:Param:Meta:size
    /// returns: Int
    fn size(&self) -> Option<PodDeserializer> {
        self.get(SpaParamMeta::Size)
    }
}

/// Spa:Pod:Object:Param:IO
#[derive(Debug)]
pub struct Io<'a>(pub PodObjectDeserializer<'a>);
impl<'a> Io<'a> {
    fn get_raw(&self, id: u32) -> Option<PodDeserializer> {
        self.0.clone().find(|v| v.key == id).map(|v| v.value)
    }
    fn get(&self, key: SpaParamIo) -> Option<PodDeserializer> {
        self.get_raw(key.to_u32().unwrap())
    }
    /// name: Spa:Pod:Object:Param:IO:id
    /// returns: Id
    fn id(&self) -> Option<PodDeserializer> {
        self.get(SpaParamIo::Id)
    }
    /// name: Spa:Pod:Object:Param:IO:size
    /// returns: Int
    fn size(&self) -> Option<PodDeserializer> {
        self.get(SpaParamIo::Size)
    }
}

/// Spa:Pod:Object:Param:Profile
#[derive(Debug)]
pub struct Profile<'a>(pub PodObjectDeserializer<'a>);
impl<'a> Profile<'a> {
    fn get_raw(&self, id: u32) -> Option<PodDeserializer> {
        self.0.clone().find(|v| v.key == id).map(|v| v.value)
    }
    fn get(&self, key: SpaParamProfile) -> Option<PodDeserializer> {
        self.get_raw(key.to_u32().unwrap())
    }
    /// name: Spa:Pod:Object:Param:Profile:index
    /// returns: Int
    fn index(&self) -> Option<PodDeserializer> {
        self.get(SpaParamProfile::Index)
    }
    /// name: Spa:Pod:Object:Param:Profile:name
    /// returns: String
    fn name(&self) -> Option<PodDeserializer> {
        self.get(SpaParamProfile::Name)
    }
    /// name: Spa:Pod:Object:Param:Profile:description
    /// returns: String
    fn description(&self) -> Option<PodDeserializer> {
        self.get(SpaParamProfile::Description)
    }
    /// name: Spa:Pod:Object:Param:Profile:priority
    /// returns: Int
    fn priority(&self) -> Option<PodDeserializer> {
        self.get(SpaParamProfile::Priority)
    }
    /// name: Spa:Pod:Object:Param:Profile:available
    /// returns: Id
    fn available(&self) -> Option<PodDeserializer> {
        self.get(SpaParamProfile::Available)
    }
    /// name: Spa:Pod:Object:Param:Profile:info
    /// returns: Struct
    fn info(&self) -> Option<PodDeserializer> {
        self.get(SpaParamProfile::Info)
    }
    /// name: Spa:Pod:Object:Param:Profile:classes
    /// returns: Struct
    fn classes(&self) -> Option<PodDeserializer> {
        self.get(SpaParamProfile::Classes)
    }
    /// name: Spa:Pod:Object:Param:Profile:save
    /// returns: Bool
    fn save(&self) -> Option<PodDeserializer> {
        self.get(SpaParamProfile::Save)
    }
}

/// Spa:Pod:Object:Param:PortConfig
#[derive(Debug)]
pub struct PortConfig<'a>(pub PodObjectDeserializer<'a>);
impl<'a> PortConfig<'a> {
    fn get_raw(&self, id: u32) -> Option<PodDeserializer> {
        self.0.clone().find(|v| v.key == id).map(|v| v.value)
    }
    fn get(&self, key: SpaParamPortConfig) -> Option<PodDeserializer> {
        self.get_raw(key.to_u32().unwrap())
    }
    /// name: Spa:Pod:Object:Param:PortConfig:direction
    /// returns: Id
    fn direction(&self) -> Option<PodDeserializer> {
        self.get(SpaParamPortConfig::Direction)
    }
    /// name: Spa:Pod:Object:Param:PortConfig:mode
    /// returns: Id
    fn mode(&self) -> Option<PodDeserializer> {
        self.get(SpaParamPortConfig::Mode)
    }
    /// name: Spa:Pod:Object:Param:PortConfig:monitor
    /// returns: Bool
    fn monitor(&self) -> Option<PodDeserializer> {
        self.get(SpaParamPortConfig::Monitor)
    }
    /// name: Spa:Pod:Object:Param:PortConfig:control
    /// returns: Bool
    fn control(&self) -> Option<PodDeserializer> {
        self.get(SpaParamPortConfig::Control)
    }
    /// name: Spa:Pod:Object:Param:PortConfig:format
    /// returns: ObjectFormat
    fn format(&self) -> Option<PodDeserializer> {
        self.get(SpaParamPortConfig::Format)
    }
}

/// Spa:Pod:Object:Param:Route
#[derive(Debug)]
pub struct Route<'a>(pub PodObjectDeserializer<'a>);
impl<'a> Route<'a> {
    fn get_raw(&self, id: u32) -> Option<PodDeserializer> {
        self.0.clone().find(|v| v.key == id).map(|v| v.value)
    }
    fn get(&self, key: SpaParamRoute) -> Option<PodDeserializer> {
        self.get_raw(key.to_u32().unwrap())
    }
    /// name: Spa:Pod:Object:Param:Route:index
    /// returns: Int
    fn index(&self) -> Option<PodDeserializer> {
        self.get(SpaParamRoute::Index)
    }
    /// name: Spa:Pod:Object:Param:Route:direction
    /// returns: Id
    fn direction(&self) -> Option<PodDeserializer> {
        self.get(SpaParamRoute::Direction)
    }
    /// name: Spa:Pod:Object:Param:Route:device
    /// returns: Int
    fn device(&self) -> Option<PodDeserializer> {
        self.get(SpaParamRoute::Device)
    }
    /// name: Spa:Pod:Object:Param:Route:name
    /// returns: String
    fn name(&self) -> Option<PodDeserializer> {
        self.get(SpaParamRoute::Name)
    }
    /// name: Spa:Pod:Object:Param:Route:description
    /// returns: String
    fn description(&self) -> Option<PodDeserializer> {
        self.get(SpaParamRoute::Description)
    }
    /// name: Spa:Pod:Object:Param:Route:priority
    /// returns: Int
    fn priority(&self) -> Option<PodDeserializer> {
        self.get(SpaParamRoute::Priority)
    }
    /// name: Spa:Pod:Object:Param:Route:available
    /// returns: Id
    fn available(&self) -> Option<PodDeserializer> {
        self.get(SpaParamRoute::Available)
    }
    /// name: Spa:Pod:Object:Param:Route:info
    /// returns: Struct
    fn info(&self) -> Option<PodDeserializer> {
        self.get(SpaParamRoute::Info)
    }
    /// name: Spa:Pod:Object:Param:Route:profiles
    /// returns: Array
    fn profiles(&self) -> Option<PodDeserializer> {
        self.get(SpaParamRoute::Profiles)
    }
    /// name: Spa:Pod:Object:Param:Route:props
    /// returns: ObjectProps
    fn props(&self) -> Option<PodDeserializer> {
        self.get(SpaParamRoute::Props)
    }
    /// name: Spa:Pod:Object:Param:Route:devices
    /// returns: Array
    fn devices(&self) -> Option<PodDeserializer> {
        self.get(SpaParamRoute::Devices)
    }
    /// name: Spa:Pod:Object:Param:Route:profile
    /// returns: Int
    fn profile(&self) -> Option<PodDeserializer> {
        self.get(SpaParamRoute::Profile)
    }
    /// name: Spa:Pod:Object:Param:Route:save
    /// returns: Bool
    fn save(&self) -> Option<PodDeserializer> {
        self.get(SpaParamRoute::Save)
    }
}

/// Spa:Pod:Object:Profiler
#[derive(Debug)]
pub struct Profiler<'a>(pub PodObjectDeserializer<'a>);
impl<'a> Profiler<'a> {
    fn get_raw(&self, id: u32) -> Option<PodDeserializer> {
        self.0.clone().find(|v| v.key == id).map(|v| v.value)
    }
    fn get(&self, key: SpaProfiler) -> Option<PodDeserializer> {
        self.get_raw(key.to_u32().unwrap())
    }
    /// name: Spa:Pod:Object:Profiler:info
    /// returns: Struct
    fn info(&self) -> Option<PodDeserializer> {
        self.get(SpaProfiler::Info)
    }
    /// name: Spa:Pod:Object:Profiler:clock
    /// returns: Struct
    fn clock(&self) -> Option<PodDeserializer> {
        self.get(SpaProfiler::Clock)
    }
    /// name: Spa:Pod:Object:Profiler:driverBlock
    /// returns: Struct
    fn driver_block(&self) -> Option<PodDeserializer> {
        self.get(SpaProfiler::DriverBlock)
    }
    /// name: Spa:Pod:Object:Profiler:followerBlock
    /// returns: Struct
    fn follower_block(&self) -> Option<PodDeserializer> {
        self.get(SpaProfiler::FollowerBlock)
    }
    /// name: Spa:Pod:Object:Profiler:followerClock
    /// returns: Struct
    fn follower_clock(&self) -> Option<PodDeserializer> {
        self.get_raw(131074u32)
    }
}

/// Spa:Pod:Object:Param:Latency
#[derive(Debug)]
pub struct Latency<'a>(pub PodObjectDeserializer<'a>);
impl<'a> Latency<'a> {
    fn get_raw(&self, id: u32) -> Option<PodDeserializer> {
        self.0.clone().find(|v| v.key == id).map(|v| v.value)
    }
    fn get(&self, key: SpaParamLatency) -> Option<PodDeserializer> {
        self.get_raw(key.to_u32().unwrap())
    }
    /// name: Spa:Pod:Object:Param:Latency:direction
    /// returns: Id
    fn direction(&self) -> Option<PodDeserializer> {
        self.get(SpaParamLatency::Direction)
    }
    /// name: Spa:Pod:Object:Param:Latency:minQuantum
    /// returns: Float
    fn min_quantum(&self) -> Option<PodDeserializer> {
        self.get(SpaParamLatency::MinQuantum)
    }
    /// name: Spa:Pod:Object:Param:Latency:maxQuantum
    /// returns: Float
    fn max_quantum(&self) -> Option<PodDeserializer> {
        self.get(SpaParamLatency::MaxQuantum)
    }
    /// name: Spa:Pod:Object:Param:Latency:minRate
    /// returns: Int
    fn min_rate(&self) -> Option<PodDeserializer> {
        self.get(SpaParamLatency::MinRate)
    }
    /// name: Spa:Pod:Object:Param:Latency:maxRate
    /// returns: Int
    fn max_rate(&self) -> Option<PodDeserializer> {
        self.get(SpaParamLatency::MaxRate)
    }
    /// name: Spa:Pod:Object:Param:Latency:minNs
    /// returns: Long
    fn min_ns(&self) -> Option<PodDeserializer> {
        self.get(SpaParamLatency::MinNs)
    }
    /// name: Spa:Pod:Object:Param:Latency:maxNs
    /// returns: Long
    fn max_ns(&self) -> Option<PodDeserializer> {
        self.get(SpaParamLatency::MaxNs)
    }
}

/// Spa:Pod:Object:Param:ProcessLatency
#[derive(Debug)]
pub struct ProcessLatency<'a>(pub PodObjectDeserializer<'a>);
impl<'a> ProcessLatency<'a> {
    fn get_raw(&self, id: u32) -> Option<PodDeserializer> {
        self.0.clone().find(|v| v.key == id).map(|v| v.value)
    }
    fn get(&self, key: SpaParamProcessLatency) -> Option<PodDeserializer> {
        self.get_raw(key.to_u32().unwrap())
    }
    /// name: Spa:Pod:Object:Param:ProcessLatency:quantum
    /// returns: Float
    fn quantum(&self) -> Option<PodDeserializer> {
        self.get(SpaParamProcessLatency::Quantum)
    }
    /// name: Spa:Pod:Object:Param:ProcessLatency:rate
    /// returns: Int
    fn rate(&self) -> Option<PodDeserializer> {
        self.get(SpaParamProcessLatency::Rate)
    }
    /// name: Spa:Pod:Object:Param:ProcessLatency:ns
    /// returns: Long
    fn ns(&self) -> Option<PodDeserializer> {
        self.get(SpaParamProcessLatency::Ns)
    }
}

/// Spa:Pod:Object:Param:Tag
#[derive(Debug)]
pub struct Tag<'a>(pub PodObjectDeserializer<'a>);
impl<'a> Tag<'a> {
    fn get_raw(&self, id: u32) -> Option<PodDeserializer> {
        self.0.clone().find(|v| v.key == id).map(|v| v.value)
    }
    fn get(&self, key: SpaParamTag) -> Option<PodDeserializer> {
        self.get_raw(key.to_u32().unwrap())
    }
    /// name: Spa:Pod:Object:Param:Tag:direction
    /// returns: Id
    fn direction(&self) -> Option<PodDeserializer> {
        self.get(SpaParamTag::Direction)
    }
    /// name: Spa:Pod:Object:Param:Tag:info
    /// returns: Struct
    fn info(&self) -> Option<PodDeserializer> {
        self.get(SpaParamTag::Info)
    }
}
